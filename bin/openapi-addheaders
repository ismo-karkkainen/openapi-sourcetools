#!/usr/bin/env ruby
# frozen_string_literal: true

# Copyright © 2024 Ismo Kärkkäinen
# Licensed under Universal Permissive License. See LICENSE.txt.

require_relative '../lib/apiobjects'
require_relative '../lib/common'
require 'optparse'
require 'yaml'


def replace_headers(obj, components)
  return unless obj.is_a?(Hash)
  obj.each do |k, v|
    if k == 'headers'
      v.keys.sort!.each do |name|
        r = v[name]
        next unless r.is_a?(Hash) # Could complain.
        next if r.key?('$ref')
        v[name] = { '$ref' => components.reference(r) }
      end
    else
      replace_headers(v, components)
    end
  end
end

def main
  input_name = nil
  output_name = nil
  path = %w[components headers]
  components = Components.new(path, 'Header')

  ENV['POSIXLY_CORRECT'] = '1'
  parser = OptionParser.new do |opts|
    opts.summary_indent = '  '
    opts.summary_width = 26
    opts.banner = 'Usage: openapi-addheaders [options]'
    opts.separator ''
    opts.separator 'Options:'
    opts.on('-i', '--input FILE', 'Read API spec from FILE, not stdin.') do |f|
      input_name = f
    end
    opts.on('-o', '--output FILE', 'Output to FILE, not stdout .') do |f|
      output_name = f
    end
    components.add_options(opts)
    opts.on('-h', '--help', 'Print this help and exit.') do
      $stdout.puts %(#{opts}

Loads API document in OpenAPI format and moves headers under components and
replaces the original with reference.

#{components.help}
)
      exit 0
    end
  end
  parser.parse!

  doc = load_source(input_name)
  return 2 if doc.nil?

  components.items = doc.dig(*path) || {}
  replace_headers(doc.dig('components', 'responses') || {}, components)
  replace_headers(doc.fetch('paths', {}), components)
  bury(doc, path, components.items) unless components.items.empty?

  dump_result(output_name, YAML.dump(doc, line_width: 1_000_000), 3)
end

exit(main) if (defined? $unit_test).nil?
