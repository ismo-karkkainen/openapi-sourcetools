#!/usr/bin/env ruby
# frozen_string_literal: true

# Copyright © 2024-2025 Ismo Kärkkäinen
# Licensed under Universal Permissive License. See LICENSE.txt.

require_relative '../lib/openapi/sourcetools/apiobjects'
require_relative '../lib/openapi/sourcetools/common'
require 'optparse'
include OpenAPISourceTools

def replace_parameter(p, components)
  return p unless p.is_a?(Hash) # Could complain.
  return p if p.key?('$ref')
  { '$ref' => components.reference(p) }
end

def replace_parameters(obj, components)
  return unless obj.is_a?(Hash)
  obj.each do |k, v|
    if k == 'parameters'
      obj[k] = v.map { |p| replace_parameter(p, components) }
    else
      replace_parameters(v, components)
    end
  end
end

def ref_name(ref)
  idx = ref.rindex('/') || -1
  ref[(idx + 1)..]
end

def nameloc2ref(params, referenced)
  nl2r = {}
  params.each do |ref|
    rn = ref_name(ref['$ref'])
    refd = referenced[rn]
    nl2r["#{refd['name']} #{refd['in']}"] = ref
  end
  nl2r
end

def add_operations_parameters(paths, referenced)
  # Top level is path item objects.
  # Below that are operations objects.
  paths.each_value do |item|
    top_nameloc2ref = nameloc2ref(item['parameters'] || [], referenced)
    oos = ApiObjects.operation_objects(item)
    oos.each_value do |operation|
      nl2r = nameloc2ref(operation['parameters'] || [], referenced)
      params = top_nameloc2ref.merge(nl2r)
      # Map also avoids alias creation at YAML saving.
      operation['parameters'] = params.keys.sort!.map { |k| { '$ref' => params[k]['$ref'] } }
    end
  end
end

def main
  input_name = nil
  output_name = nil
  add2operations = false
  path = %w[components parameters]
  components = ApiObjects::Components.new(path, 'Parameter')

  parser = OptionParser.new do |opts|
    opts.summary_indent = '  '
    opts.summary_width = 26
    opts.banner = 'Usage: openapi-addparameters [options]'
    opts.separator ''
    opts.separator 'Options:'
    opts.on('-i', '--input FILE', 'Read API spec from FILE, not stdin.') do |f|
      input_name = f
    end
    opts.on('-o', '--output FILE', 'Output to FILE, not stdout.') do |f|
      output_name = f
    end
    opts.on('-a', '--add', 'Add parameters to operations objects.') do
      add2operations = true
    end
    components.add_options(opts)
    opts.on('-h', '--help', 'Print this help and exit.') do
      $stdout.puts %(#{opts}

Loads API document in OpenAPI format and moves parameters under components and
replaces the original with reference.

Optionally adds parameters to all operations objects by copying parameters
from path item and replacing ones referred to in operations object. The
path item parameters are left in place. Even empty arrays are added.

#{components.help}
)
      exit 0
    end
  end
  parser.order!

  doc = Common.load_source(input_name)
  return 2 if doc.nil?

  components.items = doc.dig(*path) || {}
  replace_parameters(doc.fetch('paths', {}), components)
  Common.bury(doc, path, components.items) unless components.items.empty?
  # If nothing has parameters, this adds empty arrays.
  # Consistency might be desired for code generation templates.
  add_operations_parameters(doc.fetch('paths', {}), components.items) if add2operations

  Common.dump_result(output_name, doc, 3)
end

exit(main) unless defined?($unit_test)
