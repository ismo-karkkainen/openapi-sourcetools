#!/usr/bin/env ruby
# frozen_string_literal: true

# Copyright © 2025 Ismo Kärkkäinen
# Licensed under Universal Permissive License. See LICENSE.txt.

require_relative '../lib/openapi/sourcetools/apiobjects'
require_relative '../lib/openapi/sourcetools/common'
require 'optparse'
include OpenAPISourceTools


def add_combinations(combinations, security)
  security.each do |s|
    subset = s.keys.sort!
    next if subset.empty?
    combinations.add(subset)
  end
end

def gather_security(doc)
  combinations = Set.new
  security = doc.fetch('security', [])
  add_combinations(combinations, security)
  operation_objects = []
  doc.fetch('paths', {}).each_value do |item|
    oos = ApiObjects.operation_objects(item).values
    oos.each do |oo|
      add_combinations(combinations, oo['security'] || [])
      operation_objects.push(oo)
    end
  end
  [security, operation_objects, combinations]
end

def check_security(doc, combinations)
  singles = Set.new
  combinations.each do |c|
    c.each do |s|
      singles.add(s)
    end
  end
  available = Set.new((doc.dig('components', 'securitySchemes') || {}).keys)
  missing = false
  singles.each do |s|
    unless available.include?(s)
      $stderr.puts "Security scheme unavailable: #{s}"
      missing = true
    end
  end
  !missing
end

def namelist2security(item)
  item.keys.sort!.join(' ')
end

def security2hash(security)
  out = {}
  security.each { |s| out[namelist2security(s)] = s }
  out
end

def add_security_to_operations(operation_objects, top_level_security)
  operation_objects.each do |oo|
    sec = security2hash(oo['security'] || top_level_security)
    oo['security'] = sec.keys.sort!.map { |k| Marshal.load(Marshal.dump(sec[k])) }
  end
end

def main
  input_name = nil
  output_name = nil

  parser = OptionParser.new do |opts|
    opts.summary_indent = '  '
    opts.summary_width = 26
    opts.banner = 'Usage: openapi-addsecurityschemes [options]'
    opts.separator ''
    opts.separator 'Options:'
    opts.on('-i', '--input FILE', 'Read API spec from FILE, not stdin.') do |f|
      input_name = f
    end
    opts.on('-o', '--output FILE', 'Output to FILE, not stdout.') do |f|
      output_name = f
    end
    opts.on('-h', '--help', 'Print this help and exit.') do
      $stdout.puts %(#{opts}

Loads API document in OpenAPI format and moves security schemes under components and
replaces the original with reference.
)
      exit 0
    end
  end
  parser.order!

  doc = Common.load_source(input_name)
  return 2 if doc.nil?

  security, operation_objects, combinations = gather_security(doc)
  return 4 unless check_security(doc, combinations)
  add_security_to_operations(operation_objects, security)

  Common.dump_result(output_name, doc, 3)
end

exit(main) unless defined?($unit_test)
