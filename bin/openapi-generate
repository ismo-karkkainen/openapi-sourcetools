#!/usr/bin/env ruby
# frozen_string_literal: true

# Copyright © 2021-2025 Ismo Kärkkäinen
# Licensed under Universal Permissive License. See LICENSE.txt.

require_relative '../lib/openapi/sourcetools/common'
require_relative '../lib/openapi/sourcetools/loaders'
require_relative '../lib/openapi/sourcetools/gen'
require_relative '../lib/openapi/sourcetools/generate'
require 'optparse'


def main
  input_name = nil
  output_dir = nil
  config_prefix = 'openapi-generate'

  parser = OptionParser.new do |opts|
    opts.summary_indent = '  '
    opts.summary_width = 20
    opts.banner = 'Usage: openapi-generate [options] generator-names...'
    opts.separator ''
    opts.separator 'Options:'
    opts.on('-i', '--input FILE', 'Read processed API from FILE, not stdin.') do |f|
      input_name = f
    end
    opts.on('-o', '--outdir DIR', 'Output directory.') do |d|
      output_dir = d
    end
    opts.on('-c', '--config', "Internal configuration prefix, default: #{config_prefix}") do |c|
      config_prefix = c
    end
    opts.on('-h', '--help', 'Print this help and exit.') do
      $stdout.puts %(#{opts}
Loads API document in OpenAPI format and generator names. Built-in generator
or additional document loaders accept the following:
#{OpenAPISourceTools::Loaders.document.strip}

During load each generator can add and modify tasks via Gen singleton:
#{Gen.document.strip}

After all generators have loaded succesfully, tasks are run.
)
      exit 0
    end
  end
  parser.order!

  return OpenAPISourceTools::Common.aargh('Generator names must be given.', 1) if ARGV.empty?
  return OpenAPISourceTools::Common.aargh("Not a directory: #{output_dir}", 3) unless File.directory?(output_dir)

  a = OpenAPISourceTools::Common.load_source(input_name)
  return 2 if a.nil?
  gen = OpenAPISourceTools::Generator.new(a, input_name, output_dir, config_prefix)
  ec = gen.load(ARGV)
  return ec unless ec.zero?
  gen.run
end

exit(main) unless defined?($unit_test)
