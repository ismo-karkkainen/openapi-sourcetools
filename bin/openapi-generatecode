#!/usr/bin/env ruby
# frozen_string_literal: true

# Copyright © 2021-2023 Ismo Kärkkäinen
# Licensed under Universal Permissive License. See LICENSE.txt.

require_relative '../lib/common'
require 'optparse'
require 'yaml'
require 'erb'


default_env(:out, '')
default_env(:in, '')
default_env(:template, '')

ENV['POSIXLY_CORRECT'] = '1'
parser = OptionParser.new do |opts|
  opts.summary_indent = '  '
  opts.summary_width = 26
  opts.banner = 'Usage: openapi-generatecode [options] [additions...]'
  opts.separator ''
  opts.separator 'Options (equivalent environment variable and value in parentheses):'
  opts.on('-i', '--input FILE', 'Read processed API from FILE, not stdin (IN=FILE).') do |f|
    env(:in, f)
  end
  opts.on('-o', '--output FILE', 'Output result to FILE, not stdout (OUT=FILE).') do |f|
    env(:out, f)
  end
  opts.on('-t', '--template FILE', 'Read template from FILE (TEMPLATE=FILE).') do |f|
    env(:template, f)
  end
  opts.on('-h', '--help', 'Print this help and exit.') do
    $stdout.puts %(#{opts}

Loads ERB template and optional additions to a context along with the processed
API document and produces the template result.
)
    exit 0
  end
end
parser.parse!

aargh('Template file name must be given.', 1) if env(:template).empty?

def load_content(name)
  name.empty? ? $stdin.read : File.read(name)
rescue Errno::ENOENT
  aargh("Could not load #{name || 'stdin'}", 2)
rescue StandardError => e
  aargh("#{e}\nFailed to read #{name || 'stdin'}", 2)
end

class Generator
  attr_accessor :addition, :order, :full_name_order, :template, :document

  def initialize(document_content, template_content)
    @addition = Hash.new
    @order = []
    @full_name_order = []
    @document = document_content
    @template = template_content
    # This should pull a lot more information out of the document to keep
    # the templates simpler. Mainly language-independent things that are
    # in general useful. Possibly arranging same information in different
    # ways for convenience. Or adding methods that arrange and return the
    # information in different ways.
  end

  def context_binding
    binding
  end

  def add(name, content, strip_suffix)
    @full_name_order.push({ filename: name, contents: content })
    name = File.basename(name)
    @order.push name
    if strip_suffix
      idx = name.rindex('.')
      name = name.slice(0, idx) unless idx.nil?
    end
    @addition[name] = content
  end
end
t = load_content(env(:template))
d = load_content(env(:in))
begin
  $generator = Generator.new(YAML.safe_load(d), t)
rescue StandardError => e
  aargh('Failed to parse API document.', 3)
end

ARGV.each do |name|
  aargh('Addition file name is empty.', 1) if name.empty?
  if name.end_with? '.rb'
    begin
      require File.absolute_path(name)
    rescue SyntaxError => e
      aargh("Syntax error in addition #{name}: #{e.to_s}", 4)
    rescue StandardError => e
      aargh("Failed to require addition #{name}: #{e.to_s}", 5)
    end
  else
    c = load_content(name)
    begin
      d = YAML.safe_load(c)
    rescue StandardError
      d = c
    end
    $generator.add(name, d, name.upcase.end_with?('.YAML') || name.upcase.end_with?('.JSON'))
  end
end

begin
  out = ERB.new($generator.template).result($generator.context_binding)
rescue SyntaxError => e
  aargh("Template syntax error: #{e}", 6)
rescue StandardError => e
  aargh("Template error: #{e}", 7)
end

output = env(:out)
if output.empty?
  output = $stdout
else
  begin
    output = File.open(output, 'w')
  rescue StandardError
    aargh("Failed to open for writing: #{output}", 1)
  end
end
output.write(out)
output.close
