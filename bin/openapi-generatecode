#!/usr/bin/env ruby
# frozen_string_literal: true

# Copyright © 2021-2023 Ismo Kärkkäinen
# Licensed under Universal Permissive License. See LICENSE.txt.

require_relative '../lib/common'
require 'optparse'
require 'yaml'
require 'erb'


class Generator
  attr_accessor :addition, :order, :full_name_order, :template, :document

  def initialize(document_content, template_content)
    @addition = Hash.new
    @order = []
    @full_name_order = []
    @document = document_content
    @template = template_content
    # This should pull a lot more information out of the document to keep
    # the templates simpler. Mainly language-independent things that are
    # in general useful. Possibly arranging same information in different
    # ways for convenience. Or adding methods that arrange and return the
    # information in different ways.
  end

  def context_binding
    binding
  end

  def add(name, content, strip_suffix)
    @full_name_order.push({ filename: name, contents: content })
    name = File.basename(name)
    @order.push name
    if strip_suffix
      idx = name.rindex('.')
      name = name.slice(0, idx) unless idx.nil?
    end
    @addition[name] = content
  end
end

def main
  input_name = nil
  output_dir = nil
  tasks_name = nil

  ENV['POSIXLY_CORRECT'] = '1'
  parser = OptionParser.new do |opts|
    opts.summary_indent = '  '
    opts.summary_width = 26
    opts.banner = 'Usage: openapi-generatecode [options]'
    opts.separator ''
    opts.separator 'Options:'
    opts.on('-i', '--input FILE', 'Read processed API from FILE, not stdin.') do |f|
      input_name = f
    end
    opts.on('-o', '--outdir DIR', 'Output directory.') do |d|
      output_dir = d
    end
    opts.on('-t', '--tasks FILE', 'Read tasks from FILE.') do |f|
      tasks_name = f
    end
    opts.on('-h', '--help', 'Print this help and exit.') do
      $stdout.puts %(#{opts}

Loads API document in OpenAPI format and a tasks file.
Tasks file is a YAML-document with the following contents:
---
tasks:
- files: [ relative-names ]
  all: true
  select:
    paths: regex
- files: []
  all: false
  select:
    components:
      schemas: regex
...
Key files is a list or ERB template files, used in the given order.
Key all indicates whether to pass all matching objects together as an array
or one at a time to each template file.
Key select contains mapping from keys to regular expression. Objects that
match all regular expressions are selected.
)
      exit 0
    end
  end
  parser.parse!

  return aargh('Tasks file name must be given.', 1) if tasks_name.nil?

  t = load_source(tasks_name)
  return 2 if t.nil?
  a = load_source(input_name)
  return 2 if a.nil?
  return 0
  $generator = Generator.new(a, t)

  # Not really proper code.
  begin
    out = ERB.new($generator.template).result($generator.context_binding)
  rescue SyntaxError => e
    return aargh("Template syntax error: #{e}", 5)
  rescue StandardError => e
    return aargh("Template error: #{e}", 6)
  end
  0
end

exit(main) if (defined? $unit_test).nil?
