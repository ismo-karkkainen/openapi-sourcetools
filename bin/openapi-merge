#!/usr/bin/env ruby
# frozen_string_literal: true

# Copyright © 2021 Ismo Kärkkäinen
# Licensed under Universal Permissive License. See LICENSE.txt.

require 'optparse'
require 'yaml'
require 'json'


def aargh(message, exit_code = nil)
  $stderr.puts message
  exit exit_code unless exit_code.nil?
end

def env(var, value = nil)
  k = var.to_s.upcase
  ENV[k] = { false => '0', true => '1' }.fetch(value, value) unless value.nil?
  v = ENV.fetch(k, nil)
  case v
  when '0' then false
  when '1' then true
  else
    v
  end
end

def default_env(var, value)
  v = env(var)
  env(var, value) if v.nil?
end

default_env(:out, '')
default_env(:format, 'YAML')

ENV['POSIXLY_CORRECT'] = '1'
parser = OptionParser.new do |opts|
  opts.summary_indent = '  '
  opts.summary_width = 26
  opts.banner = 'Usage: openapi-merge [options] sources...'
  opts.separator ''
  opts.separator 'Options (equivalent environment variable and value in parentheses):'
  opts.on('-o', '--output FILE', 'Output result to FILE, not stdout (OUT=FILE).') do |f|
    env (:out, f)
  end
  opts.on('--yaml', 'Output format is YAML (default).') do
    env(:format, 'YAML')
  end
  opts.on('--json', 'Output format is JSON.') do
    env(:format, 'JSON')
  end
  opts.on('-h', '--help', 'Print this help and exit.') do
    $stdout.puts opts
    exit 0
  end
end
parser.parse!

aargh("Format neither JSON nor YAML: #{env(:format)}", 1) unless %w[JSON YAML].i
nclude? env(:format)

def read_source(filename)
  YAML.safe_load(File.read(filename))
rescue Errno::ENOENT => e
  aargh("Could not read #{filename}", 2)
rescue StandardError => e
  aargh(e.to_s, 3)
end

def throw(message)
  raise StandardError, message
end

def add_undefined(merged, incoming, filename, path, max_depths)
  incoming.each_pair do |key, value|
    unless merged.has_key? key
      merged[key] = value
      next
    end
    m = merged[key]
    unless m.class == value.class throw "Path #{path.join('.')} merged type #{m.class} differs from type #{value.class} in #{filename}"
    throw("Re-definition of #{path.join('.')} in #{filename}") unless max_depths[path.first] <= path.size
    if m.is_a? Hash # paths or similar
      path.push key
      add_undefined(m, value, filename, path)
      path.pop
    elsif m.is_a? Array
      value.each do |v|
        next if m.include? v
        m.push v
      end
    else
      throw "Re-definition of #{path.join('.')} in #{filename}"
    end
  end
rescue StandardError => e
  aargh(e.to_s, 3)
end

max_depths = Hash.new(0)
max_depths['openapi'] = 1
max_depths['info'] = 1
max_depths['jsonSchemaDialect'] = 0
max_depths['servers'] = 1
max_depths['paths'] = 2 # Allows get, post, options, etc. from different files.
max_depths['webhooks'] = 2
max_depths['components'] = 2
max_depths['security'] = 1
max_depths['tags'] = 1
max_depths['externalDocs'] = 0
merged = {}
ARGV.each do |filename|
  add_undefined(merged, read_source(filename), filename, [], max_depths)
end

output = env(:out)
if output.empty?
  output = $stdout
else
  begin
    output = File.open(output, 'w')
  rescue StandardError
    aargh("Failed to open for writing: #{output}", 1)
  end
end

case env(:format)
when 'JSON' then output.puts JSON.generate(merged)
when 'YAML' then output.puts YAML.dump(merged)
end
