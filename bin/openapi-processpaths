#!/usr/bin/env ruby
# frozen_string_literal: true

# Copyright © 2021-2025 Ismo Kärkkäinen
# Licensed under Universal Permissive License. See LICENSE.txt.

require_relative '../lib/openapi/sourcetools/apiobjects'
require_relative '../lib/openapi/sourcetools/common'
require 'optparse'
include OpenAPISourceTools


def main
  input_name = nil
  output_name = nil
  error = true

  parser = OptionParser.new do |opts|
    opts.summary_indent = '  '
    opts.summary_width = 24
    opts.banner = 'Usage: openapi-processpaths [options]'
    opts.separator ''
    opts.separator 'Options:'
    opts.on('-i', '--input FILE', 'Read source from FILE, not stdin.') do |f|
      input_name = f
    end
    opts.on('-o', '--output FILE', 'Output result to FILE, not stdout.') do |f|
      output_name = f
    end
    opts.on('--warn', 'Only warn of paths with same fixed parts.') do
      error = false
    end
    opts.on('-h', '--help', 'Print this help and exit.') do
      $stdout.puts %(#{opts}

Adds split path parts into API document path items under x-openapi-sourcetools
key. Checks for paths that may be ambiguous.
)
      exit 0
    end
  end
  parser.order!

  doc = Common.load_source(input_name)
  return 2 if doc.nil?

  processed = {}
  doc.fetch('paths', {}).each do |path, item|
    parts = Common.split_path(path, true)
    item['x-openapi-sourcetools-parts'] = parts # Added to original path item.
    processed[path] = ApiObjects::ServerPath.new(parts)
  end

  # Find lookalike sets.
  lookalikes = false
  paths = processed.keys.sort!
  paths.size.times do |k|
    pk = paths[k]
    a = processed[pk]
    k.times do |n|
      pn = paths[n]
      b = processed[pn]
      next unless a.compare(b).zero?
      $stderr.puts("Similar: #{pn} #{pk}")
      lookalikes = true
    end
  end
  return Common.aargh('Similar paths found.', 4) if lookalikes && error

  Common.dump_result(output_name, doc, 3)
end

exit(main) unless defined?($unit_test)
