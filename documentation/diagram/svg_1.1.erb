<?xml version="1.0"?>
<%=
w, hh = $render.dimensions
hh += $render.doc.dig('diagram', 'height_margin')
mw = $render.template.dig('styles', 'edge', 'default', 'stroke_width')
mlen = 3 * mw
fontfamily = 'font-family="-apple-system, BlinkMacSystemFont, Roboto, Helvetica, Arial, sans-serif"'

out = [
  %(<svg width="#{w + $render.doc.dig('diagram', 'width_margin')}" height="#{hh}" xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1">),
  %(<defs><marker id="head" markerWidth="#{mlen}" markerHeight="#{2 * mw}" refX="#{mlen}" refY="#{mw}" orient="auto" markerUnits="strokeWidth"><path d="M0,0 L0,#{2 * mw} L#{mlen},#{mw} z" fill="#000000"/></marker></defs>)
]
mkend = 'marker-end="url(#head)"'
$render.doc.fetch('edges', []).each do |edge|
  linestyle = %(fill="none" stroke="#{edge['stroke']}" stroke-width="#{edge['stroke_width']}")
  path = edge['path']
  next if path.nil?
  path.each do |p|
    p['xo'] = p['xo'].to_i.to_s
    p['yo'] = (hh - p['yo']).to_i.to_s
  end
  if path.size == 2
    out.push(%(<line #{linestyle} x1="#{path[0]['xo']}" x2="#{path[1]['xo']}" y1="#{path[0]['yo']}" y2="#{path[1]['yo']}" #{mkend}/>))
  else
    pts = path.map { |p| "#{p['xo']},#{p['yo']}" }
    out.push(%(<polyline #{linestyle} points="#{pts.join(' ')}" #{mkend}/>))
  end
end
$render.doc.fetch('nodes', []).each do |node|
  w = node['w'].to_i
  h = node['h'].to_i
  x = node['xo'].to_i
  y = hh - node['yo'].to_i - h
  fs = node['font_size']
  lh = fs * (1 + node['font_line_spacing'])
  nodestyle = %(fill="#{node['fill']}" stroke="#{node['stroke']}" stroke-width="#{node['stroke_width']}")
  textstyle = %(fill="#{node['font_fill']}" #{fontfamily} font-size="#{fs}" stroke="#{node['font_fill']}" stroke-width="0" xml:space="preserve")
  out.push(%(<rect #{nodestyle} height="#{h}" width="#{w}" x="#{x}" y="#{y}"/>))
  x += node['width_margin']
  y += node['height_margin'] + fs * node['font_ascend'] # Baseline for first line.
  y0 = y
  node['text'].each do |line|
    line.encode!(:xml => :text)
    out.push(%(<text #{textstyle} x="#{x}" y="#{y0}">#{line}</text>))
    y0 += lh # Shift baseline by full line + spacing height.
  end
end
out.join("\n")
%>
</svg>
