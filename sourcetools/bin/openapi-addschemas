#!/usr/bin/env ruby
# frozen_string_literal: true

# Copyright © 2024 Ismo Kärkkäinen
# Licensed under Universal Permissive License. See LICENSE.txt.

require_relative '../lib/apiobjects'
require_relative '../lib/common'
require 'optparse'
require 'yaml'


def remove_subitem(obj, path)
  return obj.delete(path.first) || {} if path.size == 1
  parent = obj.dig(*path.take(path.size - 1))
  return {} if parent.nil?
  parent.delete(path.last) || {}
end

def replace_inlines(obj, components, top_level = false)
  if obj.is_a?(Array)
    obj.each do |o|
      return false unless replace_inlines(o, components)
    end
    return true
  end
  return true unless obj.is_a?(Hash)
  return true if obj.key?('$ref')
  # Prior return would be the place to get rid of other keys if so desired.
  # Is inlined, process parts recursively.
  items = obj['allOf']
  items = obj['anyOf'] if items.nil?
  items = obj['oneOf'] if items.nil?
  # All above need special treatment in code generation templates.
  return replace_inlines(items, components) unless items.nil?
  t = obj['type']
  if t.nil? # Some kind of intermediate-level object.
    (obj.keys.sort! { |a, b| a.to_s <=> b.to_s }).each do |key|
      return false unless replace_inlines(obj[key], components)
    end
    return true
  end
  case t
  when 'array'
    return false unless replace_inlines(obj['items'], components)
  when 'object'
    props = obj.fetch('properties', {})
    props.keys.sort!.each do |name|
      return false unless replace_inlines(props[name], components)
    end
  end
  obj.replace({ '$ref' => components.reference(obj) }) unless top_level
  true
end

def main
  input_name = nil
  output_name = nil
  path = %w[components schemas]
  components = Components.new(path, 'Schema')

  ENV['POSIXLY_CORRECT'] = '1'
  parser = OptionParser.new do |opts|
    opts.summary_indent = '  '
    opts.summary_width = 26
    opts.banner = 'Usage: openapi-addschemas [options]'
    opts.separator ''
    opts.separator 'Options:'
    opts.on('-i', '--input FILE', 'Read API spec from FILE, not stdin.') do |f|
      input_name = f
    end
    opts.on('-o', '--output FILE', 'Output to FILE, not stdout .') do |f|
      output_name = f
    end
    components.add_options(opts)
    opts.on('-h', '--help', 'Print this help and exit.') do
      $stdout.puts %(#{opts}

Loads API document in OpenAPI format and adds a schema for each inline type.

#{components.help}
)
      exit 0
    end
  end
  parser.parse!

  doc = load_source(input_name)
  return 2 if doc.nil?

  # Find schema object and remove it temporarily to prevent being
  # processed again.
  components.items = remove_subitem(doc, path)
  # Get rid of inlined types within existing schemas first.
  components.items.keys.sort!.each do |k|
    return 4 unless replace_inlines(components.items[k], components, true)
  end
  return 4 unless replace_inlines(doc, components)
  bury(doc, path, components.items) unless components.items.empty?

  dump_result(output_name, YAML.dump(doc, line_width: 1_000_000), 3)
end

exit(main) if (defined? $unit_test).nil?
