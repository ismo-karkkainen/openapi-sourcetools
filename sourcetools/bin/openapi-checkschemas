#!/usr/bin/env ruby
# frozen_string_literal: true

# Copyright © 2024 Ismo Kärkkäinen
# Licensed under Universal Permissive License. See LICENSE.txt.

require_relative '../lib/apiobjects'
require_relative '../lib/common'
require 'optparse'
require 'yaml'


def typesame(a, b, ignored_keys)
  return same(a, b, ignored_keys) unless a['type'] == 'object'
  return same(a, b, ignored_keys) unless b['type'] == 'object'
  # For each property in a, find out unused mathing property in b that is
  # also either required or not.
  # Requiring property affects e.g. C++ by allowing direct membership or
  # when optional, a pointer that can have nullptr value. Or class instance
  # or null in TypeScript so I consider required to affect type.
  pa = a.fetch('properties', {})
  ra = a.fetch('required', [])
  pb = b.fetch('properties', {}).merge
  rb = b.fetch('required', [])
  pa.each do |aname, aspec|
    bnames = pb.keys.sort!
    if ra.include?(aname)
      bnames.select! { |n| rb.include?(n) }
    else
      bnames.reject! { |n| rb.include?(n) }
    end
    matched = false
    bnames.each do |bname|
      bspec = pb[bname]
      # Intended use is after openapi-addschemas so same should work as well.
      if typesame(aspec, bspec, ignored_keys)
        pb.delete(bname)
        matched = true
        break
      end
    end
    return false unless matched
  end
  pb.empty? # All matched and nothing left in pb.
end

def keys2array(keys)
  keys.to_h { |k| [ k, [] ] }
end

def gather_equivalencies(components)
  order = components.items.keys.sort!
  result = keys2array(order)
  (order.size - 1).times do |k|
    item = components.items[order[k]]
    ((k + 1)...order.size).each do |n|
      if same(item, components.items[order[n]], components.ignored_keys)
        result[order[k]].push(order[n])
        result[order[n]].push(order[k])
      end
    end
  end
  result.delete_if { |_k, v| v.empty? }
end

def gather_typematches(components)
  order = components.items.keys.sort!
  result = keys2array(order)
  (order.size - 1).times do |k|
    item = components.items[order[k]]
    ((k + 1)...order.size).each do |n|
      if typesame(item, components.items[order[n]], components.ignored_keys)
        result[order[k]].push(order[n])
        result[order[n]].push(order[k])
      end
    end
  end
  result.delete_if { |_k, v| v.empty? }
end

def gather_refs(obj, prefix, past, refs)
  if obj.is_a?(Hash)
    obj.each do |k, v|
      if v.is_a?(String) && v.start_with?(prefix)
        p = past.join('/')
        if refs.key?(v)
          refs[v].push(p)
        else
          refs[v] = [ p ]
        end
      else
        past.push(k)
        gather_refs(v, prefix, past, refs)
        past.pop
      end
    end
  elsif obj.is_a?(Array)
    obj.size.times do |n|
      past.push(n)
      gather_refs(obj[n], prefix, past, refs)
      past.pop
    end
  end
end

def gather_references(doc, prefix)
  refs = {}
  gather_refs(doc, prefix, [], refs)
  out = {}
  refs.keys.sort!.each do |k|
    r = refs[k]
    next if r.empty?
    out[k] = r.sort!
  end
  out
end

def drop_untouched(refs, report, prefix)
  touched = Set.new
  %w[equivalent typematch].each do |s|
    r = report[s]
    next if r.nil?
    r.keys.each { |k| touched.add("#{prefix}#{k}") }
  end
  refs.delete_if { |k, _v| !touched.member?(k) }
end

def count_refs(refs)
  counts = {}
  refs.each { |k, v| counts[k] = v.size }
  counts
end

def main
  input_name = nil
  output_name = nil
  path = %w[components schemas]
  components = Components.new(path, '')
  equivalent = true
  typematch = false
  references = false
  count = true
  keep = false

  ENV['POSIXLY_CORRECT'] = '1'
  parser = OptionParser.new do |opts|
    opts.summary_indent = '  '
    opts.summary_width = 26
    opts.banner = 'Usage: openapi-checkschemas [options]'
    opts.separator ''
    opts.separator 'Options:'
    opts.on('-i', '--input FILE', 'Read API spec from FILE, not stdin.') do |f|
      input_name = f
    end
    opts.on('-o', '--output FILE', 'Output to FILE, not stdout .') do |f|
      output_name = f
    end
    opts.on('-e', '--[no-]equivalent', "Report equivalent schemas, default #{equivalent}") do |b|
      equivalent = b
    end
    opts.on('-t', '--[no-]typematch', "Report typematch schemas, default #{typematch}") do |b|
      typematch = b
    end
    opts.on('-r', '--[no-]reference', "Report schema references, default #{references}") do |b|
      references = b
    end
    opts.on('-c', '--[no-]count', "Report schema reference counts, default #{count}") do |b|
      count = b
    end
    opts.on('-k', '--[no-]keep', "Keep all schema references/counts, default #{keep}") do |b|
      keep = b
    end
    components.add_options(opts)
    opts.on('-h', '--help', 'Print this help and exit.') do
      $stdout.puts %(#{opts}

Loads API document in OpenAPI format and checks if any schemas are duplicates
of another and to what degree. Equivalency may be an exact match, or property
names differ but types match.

#{components.help}

Search is performed only at top schema level. References to equivalent types
are not considered equivalent when references themselves are not equivalent.
Any allOf, anyOf, oneOf checks merely check the refernces. Hence two different
allOf schemas may in practice result in equivalent types and that is not
detected.

Implicit expectation is the openapi-addschemas has been used to process the
input, as inlined types in requests for example are ignored.
)
      exit 0
    end
  end
  parser.parse!

  doc = load_source(input_name)
  return 2 if doc.nil?

  components.items = doc.dig(*path) || {}
  report = {}
  report['equivalent'] = gather_equivalencies(components) if equivalent
  report['typematch'] = gather_typematches(components) if typematch
  if references || count
    refs = gather_references(doc, components.path)
    if equivalent || typematch # There is something to limit references to.
      refs = drop_untouched(refs, report, components.path) unless keep
    end
    report['reference'] = refs if references
    report['count'] = count_refs(refs) if count
  end
  # Filter reference counts that are not for type in equivalent or typematch.
  # Could check for pretty-printed output format here.
  dump_result(output_name, YAML.dump(report, line_width: 80), 3)
end

exit(main) if (defined? $unit_test).nil?
