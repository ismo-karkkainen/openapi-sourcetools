#!/usr/bin/env ruby
# frozen_string_literal: true

# Copyright © 2021-2024 Ismo Kärkkäinen
# Licensed under Universal Permissive License. See LICENSE.txt.

require_relative '../lib/common'
require 'optparse'
require 'yaml'
require 'set'

def raise_se(message)
  raise StandardError, message
end

def path_combo(path, prefix = true)
  if prefix
    path.empty? ? 'at root' : "under #{path.join('.')}"
  else
    path.empty? ? 'root' : path.join('.')
  end
end

def too_deep(path, max_depths)
  return false if path.empty?
  max_depths.fetch(path.first) <= path.size
end

def add_undefined(merged, incoming, filename, path, max_depths)
  incoming.each_pair do |key, value|
    unless merged.key? key
      merged[key] = value
      next
    end
    m = merged[key]
    raise_se("Path #{path_combo(path, false)} merged type #{m.class} differs from type #{value.class} in #{filename}") unless m.instance_of?(value.class)
    raise_se("Re-definition of #{key} #{path_combo(path)} in #{filename}") if too_deep(path, max_depths)
    if m.is_a? Hash # paths or similar
      path.push key
      add_undefined(m, value, filename, path, max_depths)
      path.pop
    elsif m.is_a? Array
      value.each do |v|
        next if m.include? v
        m.push v
      end
    else
      raise_se "Re-definition of #{key} #{path_combo(path)} in #{filename}"
    end
  end
end

def gather_refs(doc, found)
  doc.each_pair do |key, value|
    if key == '$ref' && value.is_a?(String) && value.start_with?('#/components/')
      found.add(value)
    elsif value.is_a? Hash
      gather_refs(value, found)
    elsif value.is_a? Array
      value.each do |v|
        gather_refs(v, found) if v.is_a? Hash
      end
    end
  end
end

def prune(merged)
  prev_refs = Set.new
  loop do # May have references from deleted so repeat until nothing deleted.
    refs = Set.new
    gather_refs(merged, refs)
    merged.fetch('security', []).each do |sec|
      sec.each_key do |key|
        refs.add("#/components/securitySchemes/#{key}")
      end
    end
    used = {}
    all = merged.fetch('components', {})
    refs.each do |ref|
      p = ref.split('/')
      p.shift(2)
      item = all
      p.each do |key|
        item = item.fetch(key, nil)
        break if item.nil?
      end
      next if item.nil?
      sub = used
      p.each_index do |k|
        if k + 1 < p.size
          sub[p[k]] = {} unless sub.key? p[k]
          sub = sub[p[k]]
        else
          sub[p[k]] = item
        end
      end
    end
    merged['components'] = used
    break if refs == prev_refs
    prev_refs = refs
  end
end

def main
  output_file = nil
  keep = false

  ENV['POSIXLY_CORRECT'] = '1'
  parser = OptionParser.new do |opts|
    opts.summary_indent = '  '
    opts.summary_width = 26
    opts.banner = 'Usage: openapi-merge [options] sources...'
    opts.separator ''
    opts.separator 'Options:'
    opts.on('-o', '--output FILE', 'Output result to FILE, not stdout.') do |f|
      output_file = f
    end
    opts.on('-k', '--keep', 'Keep all unreferenced objects under components.') do
      keep = true
    end
    opts.on('-p', '--prune', 'Prune all unreferenced objects under components (default).') do
      keep = false
    end
    opts.on('-h', '--help', 'Print this help and exit.') do
      $stdout.puts %(#{opts}

Source files are combined to form one API specification document. Sources are
allowed only to append to the merged document, not re-define anything in it.
)
      exit 0
    end
  end
  parser.parse!

  max_depths = Hash.new(0)
  max_depths['openapi'] = 1
  max_depths['info'] = 1
  max_depths['servers'] = 1
  max_depths['paths'] = 2 # Allows get, post, etc. from different files.
  max_depths['webhooks'] = 2
  max_depths['components'] = 2
  max_depths['security'] = 1
  max_depths['tags'] = 1
  merged = {}
  ARGV.each do |filename|
    s = load_source(filename)
    return 2 if s.nil?
    add_undefined(merged, s, filename, [], max_depths)
  rescue StandardError => e
    return aargh(e.to_s, 4)
  end

  prune(merged) unless keep

  dump_result(output_file, YAML.dump(merged), 3)
end

exit(main) if (defined? $unit_test).nil?
