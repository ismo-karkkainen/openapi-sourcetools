#!/usr/bin/env ruby
# frozen_string_literal: true

# Copyright 2024-2025 Ismo Kärkkäinen
# Licensed under Universal Permissive License. See LICENSE.txt.

require_relative '../shared/unittest'
require_relative '../lib/openapi/sourcetools/apiobjects'
require 'yaml'

path = '#/components/parameters'

$unit_test = 0
load '../bin/openapi-addparameters'
include OpenAPISourceTools

$context = 'replace_parameter'
c = ApiObjects::Components.new(path, 'Parameter')
a = 'not hash'
assert(replace_parameter(a, c), a, 'Same returned when not a hash')
a = { '$ref' => 3, b: 3 }
b = replace_parameter(a, c)
assert(b.key?(:b), true, 'Output has b')
assert(a, b, 'Same returned when has ref')
a = { b: 3 }
b = replace_parameter(a, c)
assert(b.key?('$ref'), true, 'Ref returned')
assert(b.size, 1, 'Only ref')
assert(c.items.size, 1, 'Ref in components')

$context = 'replace_parameters'
def get_doc
  YAML.safe_load(%(
---
paths:
  something:
    parameters:
    - "$ref": "#/components/parameters/TopName"
    get:
      other: 123
      parameters:
      - name: foo
        in: path
        schema:
          "$ref": "#/components/schemas/Name"
      - name: toplevel
        in: path
        schema:
          "$ref": "#/components/schemas/TopName"
    method:
      no: parameters
    put:
      parameters:
      - name: foo
        in: path
        schema:
          "$ref": "#/components/schemas/Name"
  otherthing:
    method:
      parameters:
      - name: foo
        in: path
        schema:
          "$ref": "#/components/schemas/Name"
components:
  schemas:
    TopName:
      description: ignored
      type: string
    Name:
      type: string
  parameters:
    TopName:
      name: toplevel
      in: path
      schema:
        "$ref": "#/components/schemas/TopName"
))
end
obj = get_doc.dig('paths', 'something')
c = ApiObjects::Components.new(path, 'Parameter')
c.items = get_doc.dig('components', 'parameters')
replace_parameters(obj, c)
r = c.items
assert(obj.dig('get', 'parameters').first.key?('$ref'), true, 'Ref1 made')
assert(obj.dig('get', 'parameters').last.key?('$ref'), true, 'Ref2 made')
assert(obj.dig('get', 'parameters').last['$ref'],
  obj.dig('parameters').first['$ref'], 'Same ref')
assert(obj.dig('get', 'parameters').first['$ref'],
  obj.dig('put', 'parameters').first['$ref'], 'Ref3 same as ref1')
assert(obj.dig('parameters').first['$ref'],
  get_doc.dig('paths', 'something', 'parameters').first['$ref'], 'Ref remains')
obj = get_doc.dig('paths', 'otherthing')
replace_parameters(obj, c)
assert(obj.dig('method', 'parameters').first.key?('$ref'), true, 'Ref added')

exit $unit_test
