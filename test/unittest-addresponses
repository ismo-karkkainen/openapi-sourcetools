#!/usr/bin/env ruby
# frozen_string_literal: true

# Copyright 2024-2025 Ismo Kärkkäinen
# Licensed under Universal Permissive License. See LICENSE.txt.

require_relative '../shared/unittest'
require_relative '../lib/openapi/sourcetools/apiobjects'
require 'yaml'

$unit_test = 0
load '../bin/openapi-addresponses'
include OpenAPISourceTools

$context = 'replace_responses'
path = '#/components/responses'
def get_doc
  YAML.safe_load(%(
---
something:
  get:
    other: 123
    responses:
      200:
        key: value
      201:
        $ref: '#/components/responses/Resp'
      204:
        somekey: someval
        description: ignored
    anything:
      key: 87
      key2: val
  method:
    no: responses
  put:
    responses:
      204:
        somekey: someval
        summary: ignored
      500:
        key: value
otherthing:
  method:
    responses:
      500:
        key: value
      313: not_a_hash
))
end
obj = get_doc.dig('something', 'get')
c = ApiObjects::Components.new(path, 'Response')
replace_responses(obj, c)
r = c.items
assert(obj.dig('responses', 200).key?('$ref'), true,
  'Ref1 made')
assert(obj.dig('responses', 201)['$ref'],
  get_doc.dig('something', 'get', 'responses', 201)['$ref'], 'Ref retained')
assert(obj.dig('responses', 204).key?('$ref'), true,
  'Ref2 made')
assert(r.size, 2, '2 references added')
obj = get_doc.dig('otherthing', 'method')
c = ApiObjects::Components.new(path, 'Response')
replace_responses(obj, c)
r = c.items
assert(obj.dig('responses', 500).key?('$ref'), true, 'Ref made')
assert(obj.dig('responses', 313).is_a?(Hash), false, 'Ref not made')
obj = get_doc
c = ApiObjects::Components.new(path, 'Response')
replace_responses(obj, c)
r = c.items
ref = obj.dig('something', 'get', 'responses', 200, '$ref')
assert(ref.nil?, false, 'Ref exists')
assert(ref,
  obj.dig('otherthing', 'method', 'responses', 500, '$ref'), 'Same reference')
assert(ref,
  obj.dig('something', 'put', 'responses', 500, '$ref'), 'Same reference again')
ref = obj.dig('something', 'get', 'responses', 204, '$ref')
assert(ref.nil?, false, 'Ref 2 exists')
assert(ref,
  obj.dig('something', 'put', 'responses', 204, '$ref'), 'Same reference 2')

exit $unit_test
