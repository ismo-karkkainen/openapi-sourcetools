#!/usr/bin/env ruby
# frozen_string_literal: true

# Copyright 2024-2025 Ismo Kärkkäinen
# Licensed under Universal Permissive License. See LICENSE.txt.

require_relative '../shared/unittest'
require 'yaml'

$unit_test = 0
require_relative '../lib/openapi/sourcetools/gen'

module Gen
  public_class_method :add_doc
  public_class_method :read_attr
  public_class_method :mod_attr2_reader
  public_class_method :mod_attr_reader
  public_class_method :rw_attr
  public_class_method :mod_attr2_accessor
  public_class_method :mod_attr_accessor
end

$context = 'mod_attr_reader'
Gen.mod_attr_reader(:readonly, 'ro-document', 5)
begin
  x = Gen.readonly
  assert(x, 5, 'Has read-only attribute.')
rescue Exception
  assert(true, false, 'Attribute access failed')
end

$context = 'mod_attr_accessor'
Gen.mod_attr_accessor(:readwrite, nil, 6)
begin
  x = Gen.readwrite
  assert(x, 6, 'Has readable attribute.')
  Gen.readwrite = 7
  assert(Gen.readwrite, 7, 'Has writable attribute.')
rescue Exception
  assert(true, false, 'Attribute access failed')
end

$context = 'defaults'
assert(Gen.doc.nil?, true, 'doc nil')
assert(Gen.outdir.nil?, true, 'outdir nil')
assert(Gen.d.is_a?(OpenAPISourceTools::Docs), true, 'docs set')
assert(Gen.in_name.nil?, true, 'in_name nil')
assert(Gen.in_basename.nil?, true, 'in_basename nil')
assert(Gen.tasks.is_a?(Array), true, 'tasks set')
assert(Gen.tasks.empty?, true, 'tasks is empty')
assert(Gen.g.is_a?(Hash), true, 'g set')
assert(Gen.g.empty?, true, 'g is empty')
assert(Gen.x.is_a?(Hash), true, 'x set')
assert(Gen.x.empty?, true, 'x is empty')
assert(Gen.h.nil?, true, 'h nil')
assert(Gen.t.nil?, true, 't nil')
assert(Gen.task_index.nil?, true, 'task_index nil')
assert(Gen.loaders.is_a?(Array), true, 'loaders set')
assert(Gen.loaders.empty?, true, 'loaders is empty')

$context = 'setup'
Gen.setup('doc', 'dir/name.ext', 'outdir', '../test-generate/gen-config')
assert(Gen.doc, 'doc', 'doc set')
assert(Gen.outdir, 'outdir', 'outdir set')
assert(Gen.in_name, 'name.ext', 'in_name set')
assert(Gen.in_basename, 'name', 'in_basename set')
assert(Gen.tasks.is_a?(Array), true, 'tasks set')
assert(Gen.tasks.size, 1, 'tasks has default helper task')
assert(Gen.configuration.is_a?(Hash), true, 'configuration set')
assert(Gen.configuration['root'] || '', 'value', 'configuration loaded')

exit $unit_test
