#!/usr/bin/env ruby
# frozen_string_literal: true

# Copyright 2024-2025 Ismo Kärkkäinen
# Licensed under Universal Permissive License. See LICENSE.txt.

require_relative '../shared/unittest'
require 'yaml'
require 'set'

$unit_test = 0
load '../bin/openapi-merge'

$context = 'raise_se'
msg = 'msg'
begin
  raise_se(msg)
rescue StandardError => e
  assert(e.to_s, msg, 'exception and message')
rescue Exception
  assert(true, false, 'Unexpected exception')
end

$context = 'too_deep'
md = {
  'shallow' => 1,
  'deep' => 3
}
assert(too_deep([], md), false, 'empty')
assert(too_deep(%w[shallow], md), true, 'just root')
assert(too_deep(%w[shallow toodeep], md), true, 'too deep')
assert(too_deep(%w[deep notenough], md), false, 'not deep')
assert(too_deep(%w[deep middle notenough], md), true, 'border case')

$context = 'gather_refs'
def doc1
  anchor = '#anchor'
  arr = '#/components/schemas/Arr'
  normal = '#/components/schemas/Normal'
  [anchor, arr, normal, YAML.safe_load(%(
root:
  "$ref": "#{anchor}"
  key:
    array:
    - item: val
    - "$ref": "#{arr}"
    "$ref": "#{normal}"
nothing:
  here:
  - 1
  - "foo"
  - "$ref"
  key: "#/components/schemas/NotReference"
))]
end
anchor, arr, normal, doc = doc1
refs = Set.new
gather_refs(doc, refs)
assert(refs.size, 3, '3 references')
assert(refs.member?(anchor), true, 'anchor in')
assert(refs.member?(arr), true, 'arr in')
assert(refs.member?(normal), true, 'normal in')

$context = 'has_refd_anchor'
def doc2
  YAML.safe_load(%(
root:
  "$ref": "#anchor"
  key:
    array:
    - item: val
    - "$ref": "#/components/schemas/Item"
    "$ref": "#/components/schemas/Normal"
  nothing:
    here:
    - 1
    - "foo"
    - "$ref"
    key: "#/components/schemas/NotReference"
components:
  schemas:
    Refd:
      "$anchor": anchor
    Unrefd:
      "$anchor": something
    InArray:
    - none
    - "$anchor": anchor
    - "does not matter"
    Invalid: value
    Missing:
      key: nothash
      "$ref": "#/components/schemas/Normal"

))
end
doc = doc2
refs = Set.new
gather_refs(doc, refs)
def dig(doc, name)
  doc.dig('components', 'schemas', name)
end
assert(has_refd_anchor(dig(doc, 'Refd'), refs), true, 'Refd')
assert(has_refd_anchor(dig(doc, 'Unrefd'), refs), false, 'Unrefd')
assert(has_refd_anchor(dig(doc, 'InArray'), refs), true, 'InArray')
assert(has_refd_anchor(dig(doc, 'Invalid'), refs), false, 'Invalid')
assert(has_refd_anchor(dig(doc, 'Missing'), refs), false, 'Missing')

exit $unit_test
